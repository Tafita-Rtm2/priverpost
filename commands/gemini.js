const axios = require('axios');
const fs = require('fs');
const path = require('path');

module.exports = {
  name: 'gemini',
  description: 'Chat avec Gemini ou g√©n√®re une image',
  author: 'vex_kshitiz',

  async execute(senderId, args, pageAccessToken, sendMessage, event = null) {
    const prompt = args.join(' ').trim();

    // V√©rifie si une image est envoy√©e directement dans le message
    if (event?.attachments?.length > 0) {
      try {
        // Si une image est envoy√©e, la d√©crire automatiquement
        const photoUrl = event.attachments[0].url;
        const description = await describeImage(prompt || "D√©cris cette image", photoUrl);
        const formattedResponse = `üë©‚Äçüíª | ùô∂ùöéùöñùöíùöóùöí |\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nDescription: ${description}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
        await sendMessage(senderId, { text: formattedResponse }, pageAccessToken);
      } catch (error) {
        console.error('Erreur lors de la description de l‚Äôimage:', error);
        await sendMessage(senderId, { text: 'D√©sol√©, une erreur est survenue lors de la description de l‚Äôimage.' }, pageAccessToken);
      }
      return;
    }

    if (!prompt) {
      return sendMessage(senderId, { text: "üë©‚Äçüíª | ùô∂ùöéùöñùöíùöóùöí |\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nVeuillez fournir un prompt ou envoyer une image.\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" }, pageAccessToken);
    }

    try {
      if (args[0]?.toLowerCase() === "draw") {
        // G√©n√©rer une image
        await sendMessage(senderId, { text: 'üí¨ *Gemini est en train de g√©n√©rer une image* ‚è≥...\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ' }, pageAccessToken);

        const imageUrl = await generateImage(prompt);

        // T√©l√©chargement de l'image g√©n√©r√©e
        const imagePath = path.join(__dirname, 'cache', `image_${Date.now()}.png`);
        const writer = fs.createWriteStream(imagePath);
        const { data } = await axios({ url: imageUrl, method: 'GET', responseType: 'stream' });
        data.pipe(writer);

        await new Promise((resolve, reject) => {
          writer.on('finish', resolve);
          writer.on('error', reject);
        });

        // Envoyer l'image g√©n√©r√©e
        await sendMessage(senderId, {
          text: 'üë©‚Äçüíª | ùô∂ùöéùöñùöíùöóùöí |\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nImage g√©n√©r√©e :',
          attachment: fs.createReadStream(imagePath)
        }, pageAccessToken);
      } else {
        // Obtenir une r√©ponse textuelle
        await sendMessage(senderId, { text: 'üí¨ *Gemini est en train de te r√©pondre* ‚è≥...\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ' }, pageAccessToken);
        const response = await getTextResponse(prompt, senderId);
        const formattedResponse = `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚ú® Gemini ü§ñ\n\n${response}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

        // G√©rer les r√©ponses longues
        const maxMessageLength = 2000;
        if (formattedResponse.length > maxMessageLength) {
          const messages = splitMessageIntoChunks(formattedResponse, maxMessageLength);
          for (const message of messages) {
            await sendMessage(senderId, { text: message }, pageAccessToken);
          }
        } else {
          await sendMessage(senderId, { text: formattedResponse }, pageAccessToken);
        }
      }
    } catch (error) {
      console.error('Erreur lors de l‚Äôappel API Gemini:', error);
      await sendMessage(senderId, { text: 'D√©sol√©, une erreur est survenue. Veuillez r√©essayer plus tard.' }, pageAccessToken);
    }
  }
};

// Fonction pour obtenir une description d'image via l'API
async function describeImage(prompt, photoUrl) {
  try {
    const { data } = await axios.get(`https://sandipbaruwal.onrender.com/gemini2?prompt=${encodeURIComponent(prompt)}&url=${encodeURIComponent(photoUrl)}`);
    return data.answer;
  } catch (error) {
    throw new Error('Erreur lors de la description de l‚Äôimage');
  }
}

// Fonction pour obtenir une r√©ponse textuelle via l'API
async function getTextResponse(prompt, senderId) {
  try {
    const { data } = await axios.get(`https://gemini-ai-pearl-two.vercel.app/kshitiz?prompt=${encodeURIComponent(prompt)}&uid=${senderId}&apikey=kshitiz`);
    return data.answer;
  } catch (error) {
    throw new Error('Erreur lors de l‚Äôappel API Gemini pour la r√©ponse textuelle');
  }
}

// Fonction pour d√©couper les messages trop longs
function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}

// Fonction pour g√©n√©rer une image
async function generateImage(prompt) {
  try {
    const { data } = await axios.get(`https://sdxl-kshitiz.onrender.com/gen?prompt=${encodeURIComponent(prompt)}&style=3`);
    return data.url;
  } catch (error) {
    throw new Error('Erreur lors de la g√©n√©ration de l‚Äôimage');
  }
}
